---
title: "Final Project"
author: "Johnny Ching, Haomin Mai, Lehan Zou"
date: "2023-03-24"
categories: [coding, python]
image: "whitecastle.jpg"
---
# Travel Recommendation System

## Overview
In this blog, our group (Haomin, Lehan, and Johnny) will explain the utility and use-cases for our webapp, which is a travel recommendation system. The link to our github repo is [here](https://github.com/Lehan77/PIC16B_Final_Project)

Our website should be fairly intuitive to use since it only contains two fields to fill: city and interest. Afterwards, you may press the "search" button and it'll provide a list of potential locations with their names, locations, and a nice map to display their relative distances from the city of interest to add to your itenerary. If you see an attractive location, you can add it to your saved plan.

Here's how the home page is presented:
![](screenshot1.png)

## Technicalities

Allow us to import all necessary libraries first:
```{python}
from flask import Flask, render_template, request, url_for
import pandas as pd
import warnings
import googlemaps
import sqlite3
import json
import calendar
import datetime
import plotly.express as px
import plotly
import plotly.io as pio
import plotly.graph_objs as go
warnings.simplefilter(action='ignore', category=FutureWarning)
pio.renderers.default='iframe'
```

### Home page

Now that we know how to operate our simple webapp, we will be going over the technical aspects of this project. Throughout the development of the webapp, we utilized and learned many skills, which included the use of python's Flask, Google Maps API, Mapbox API, plotly visualizations, and json file handling, along with languages such as HTML, CSS, and Javascript. As such, we must go over every critical aspect of our program which is necessary to make our webpage run properly.

Our app is only comprised of two pages: the **main page** and the **search page**. In our Flask app, each page is only really composed of a couple lines which renders the page with HTML templates and information pulled from the Google Maps and Mapbox API. Here's a snippet of code which comprises the home page:
```{python, echo=FALSE}
app = Flask(__name__)

@app.route('/')
def home():
    cur_index = int(request.args.get('cur_index', '0'))
    recommend, cur_index = get_random_rec(cur_index)
    return render_template('home.html', recommend=recommend, cur_index=cur_index)
```

Our homepage is set up such that each time you load it, a different URL indicates a different state for its current cursor index. This cursor index is used to describe a different set of locations to present to the user as a preview of what our website has in store. The get_random_rec() function collects the current cursor index and presents a set of locations which is displayed one at a time to the user at random. This provides a neat presentation of random locations, all of which were scraped from Tripadvisor. This scraped data was collected through running a spider and collecting all necessary information from a small subset of Tripadvisor, which took about 3 hours to collect about 3000 entries. We quickly found this to be an inefficient use of time and computational power, so we only utilized the Tripadvisor dataset to the preview of random places on our homepage. 

Despite our limitations with the Tripadvisor dataset, we had a new hope through the use of the googlemaps API for our search page. Through accepting the two fields of 'city' and 'interest,' we now have a well-defined set of constraints to do a deeper search, which is now passed onto the '/search' portion of our webapp. A sample input for our homepage, along with a different random recommendation can be seen below:

![](screenshot2.png)

### Search page

Next, we may begin exploring our search page, which is written as the following:

```{python, echo=FALSE}
@app.route('/search', methods=['POST'])
def search():
    current_plan = []
    city = request.form['city']
    interest = request.form['interest']
    places, lat, lng, names = search_place(city, interest)
    fig = create_figure(lat = lat, lng = lng, names=names)
    fig_json = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    df = info(places)
    save_to_database(df)
    return render_template('results.html', city=city, interest=interest, table=df, current_plan=current_plan,fig_json=fig_json)
```
There is a bit to unpack here, as there are many python functions we must define, such as create_figure(), info(), search_place(), and save_to_database().

**We must put a disclaimer for any user attempting to utilize our program to first create a Google account and collect their own API key for Google Maps. You'd also need to create another account with Mapbox and create your own Mapbox token to create a functioning search page**

Designing our search page was a bit less straightforward and a lot more difficult, as we wanted to provide as much specific information about interests near a city with user-given strings. We tackled this by utilizing Google's Google Maps API, which conveniently returned us a JSON-like dictionary for us to extract useful information, such as coordinates, ratings, addresses, open times, etc. The search_places function utilized the API to collect all such information and present it in the form of dictionaries.

This dictionary was then given to our info() function to handle cleaning all the data collected from the search_place()-returned dictionary. And finally, our create_figure() function is responsible for creating a plotly plot and saving it in a JSON format for our search page to display a map of relevant locations. After all the necessary information, we can save the user input into a database for us to manage in the future. We can now show you the finished second webpage:

![](screenshot3.png)

### Important Functions

Although we did show the general scope of each webpage, we haven't shown our functions which makes all the magic happen in detail just yet. Here will be all the necessary and required functions, along with an in-depth overview of each:

```{python, echo=FALSE}

def search_place(city, interest):
    '''
    Input:
        city name, and interest (bar, amusement park, food, etc.)
    Output:
        An array of all places which are arrays of objects including
        their name, address, rating, etc.
    '''
    gmaps = googlemaps.Client(key=api_key)
    city_gmap = gmaps.places(query=city)
    city_location = city_gmap['results'][0]['geometry']['location']
    places_result = gmaps.places(location=city_location, query=interest)
    places_list = places_result['results']
    lat = []
    lng = []
    names = []
    for i in places_list:
        lat.append(i['geometry']['location']['lat'])
        lng.append(i['geometry']['location']['lng'])
        names.append(i['name'])
    return (places_list, lat, lng, names)


def info(places):
    """
    Extract useful information from the
    list of places and return a dataframe

    city: the name of the city
    interest: the type of interests like restaurant, museums

    """
    columns = ['result', 'name', 'address', 'rating', 'rating_numbers', 'open_hour']
    df = pd.DataFrame(columns=columns)
    for place in places:
        name = place['name']
        address = place['formatted_address']
        rating = place.get('rating', 0)  # Use 0 as default rating if not found
        rating_numbers = place.get('user_ratings_total', 0)  # Use 0 as default rating count if not found
        open_hour = reorganize_opening_hours(place['place_id'])
        df = pd.concat([df, pd.DataFrame({
            'result': len(df) + 1,
            'name': [name],
            'address': [address],
            'rating': [rating],
            'rating_numbers': [rating_numbers],
            'open_hour': [open_hour]
        })])
    df.reset_index(drop=True, inplace=True)
    return df
    

def create_figure(lat,lng,names):
    fig = go.Figure(data=go.Scattermapbox(
        lat=lat, lon=lng, mode='markers+text', 
        text=names, hovertext=names, hovertemplate='<b>%{text}</b><extra></extra>'
        ))
    fig.update_layout(
        mapbox={
            'accesstoken': token,
            'center': {'lat': lat[0], 'lon': lng[0]},
            'zoom': 12},
        margin=dict(l=0, r=0, t=0, b=0) # remove margins
    )
    fig.update_traces(
        marker_size=10,
        textposition='top center',
        hoverlabel_namelength=-1,
    )
    return fig


def save_to_database(df):
    # Connect to the database
    conn = sqlite3.connect('places.db')
    cur = conn.cursor()
    # Drop the places table if it already exists
    cur.execute("DROP TABLE IF EXISTS places")
    # Create a new places table
    cur.execute(
        "CREATE TABLE places (name TEXT, address TEXT, rating INTEGER, rating_numbers INTEGER, open_hour TEXT)")
    # Insert the data into the places table
    for row in df.itertuples(index=False):
        cur.execute("INSERT INTO places VALUES (?, ?, ?, ?, ?)",
                    (str(row.name), str(row.address), float(row.rating), float(row.rating_numbers), str(row.open_hour)))
    # Commit the changes and close the connection
    conn.commit()
    conn.close()
```
Our search_place() function requires two arguments, which were the aforementioned city and interest string passed in by the user. We cleverly utilized the Google Maps API to collect from their massive database quickly and proceed to extract the city's coordinates given the keyword of the city (e.g. "Los Angeles") and plug this back into the API to shower us with the top 20 results related to the user's interest close to the city's coordinates. This function also returns the the dictionary of the places along with the list of latitudes, longitudes, and names of all places in their respective lists for us.

For our info() funciton, it takes the the dictionary provided by search_place(), and extracts useful information about the dictionary of places and returns us a nice Pandas Dataframe. This is a relatively self-explanatory function which only cleans and presents our data in am easy to work with format.

Next, our create_figure() function takes in the list of latitudes, longitudes, and names of places provided by search_place() and gives us a convenient plotly graph object to present a pleasant interactive plot of our relevant places. This map requires us to have our own Mapbox token ('access token') to properly utilize the plot, otherwise it would be blank. This graph object would then be converted to a JSON object for the search page in our main app page functions.

Finally, our save_to_database() function saves the dataframe of places we extracted from the Google Maps API and neatly stores it away in a database called 'places.db.' It's very straighforward in which we connect to the database, then execute a series of commands with SQL-injection safe methods, then committing and closing the database for safe measure.

Let us demonstrate the create_figure() function when properly executed and converted to JSON for the web browser. Here is a map of the top 20 fast food restaurant results in Rowland Heights:
![](screenshot4.png)

## Remarks

Despite this website being very simple to utilize, it provides a useful tool to plan iteneraries for the particularly busy people. Although there are plenty of other sites which provide a similar service, our site provides a method create a plan which is not limited to certain categories, as do many other sites. Overall, this is a very fun and useful tool to those who are more inclined to spend their time in other fashions rather than creating an itenerary for family, friends, or loved ones. The only ethical ramification of this website would be the loss of "fun of planning" if that is a large factor of the plan itself.


